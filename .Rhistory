head(mytab)
mytab<-table(days,sex)
head(mytab)
mytab<-xtabs(~days+sex)
head(mytab)
mytab==mytab1
mytab1<-table(days,sex)
mytab==mytab1
chisq.test(mytab)
names(iris)
attach(iris)
mytab<-xtabs(~Sepal.Length+Species)
chisq.test(mytab)
mytab<-xtabs(~absenteeism$sex+absenteeism$lrn)
chisq.test(mytab)
mytab<-xtabs(~Petal.Length+Sepal.Length)
chisq.test(mytab)
head(mytab)
mytable<-table(absenteeism$sex, absenteeism$lrn)
prop.table(mytable)
names(absenteeism)
names(absenteeism)
attach(absenteeism)
mytablrneth<-table(lrn,eth)
chisq.test(mytablrneth)
mytablrneth<-table(lrn,sex)
chisq.test(mytablrnsex)
mytablrnsex<-table(lrn,sex)
chisq.test(mytablrnsex)
names(absenteeism)
lrn
names(absenteeism)
mytablrnage<-table(lrn,age)
chisq.test(mytablrnage)
mytablrnage
mytablrneth<-table(lrn,eth+sex+age)
chisq.test(mytablrneth)
mytablrneth<-table(lrn,eth+sex+age)
mytablrneth
?table
mytablrneth<-table(absenteeism)
mytablrneth
mytablrneth<-table(absenteeism[,1:4])
mytablrneth
chisq.test(mytablrneth)
mytablrneth<-table(lrn,eth)
mytablrneth
chisq.test(mytablrneth)
?xtable
??xtable
names(absenteeism)
xtable(absenteeism[1:4])
xtabs(absenteeism[1:4])
xtabs(~absenteeism[1:4])
names(absenteeism)
xtabs(learn~eth+sex+age)
xtabs(lrn~eth+sex+age)
xtabs(~eth+sex+age)
xtabs(~lrn+eth+sex+age)
chisq.text(xtabs(~lrn+eth+sex+age))
chisq.test(xtabs(~lrn+eth+sex+age))
?absenteeism
names(absenteeism)
names(absenteeism)
attach(absenteeism)
mytablrneth<-table(lrn,eth)
mytablrneth
addmargins(mytablrneth)
chisq.test(mytablrneth)
mytablrnsex<-table(lrn,sex)
addmargins(mytablrnsex)
chisq.test(mytablrnsex)
addmargins(mytablrnsex)
mytablrnage<-table(lrn,age)
addmargins(mytablrnage)
chisq.test(mytablrnage)
addmargins(mytablrnage)
chisq.test(mytablrnage)
ch<-chisq.test(mytablrnage)
ch$p.value
names(absenteeism)
attach(absenteeism)
mytablrneth<-table(lrn,eth)
addmargins(mytablrneth)
chisq.test(mytablrneth)
mytablrnsex<-table(lrn,sex)
addmargins(mytablrnsex)
chisq.test(mytablrnsex)
mytablrnage<-table(lrn,age)
addmargins(mytablrnage)
chisq.test(mytablrnage)
attach(absenteeism)
mytablrneth<-table(lrn,eth)
addmargins(mytablrneth)
chisq.test(mytablrneth)
mytablrnsex<-table(lrn,sex)
addmargins(mytablrnsex)
chisq.test(mytablrnsex)
mytablrnage<-table(lrn,age)
addmargins(mytablrnage)
chisq.test(mytablrnage)
mytablrnage<-table(lrn,age)
addmargins(mytablrnage)
chisq.test(mytablrnage)
# mytablrneth<-table(lrn,eth)
# addmargins(mytablrneth)
# chisq.test(mytablrneth)
# mytablrnsex<-table(lrn,sex)
# addmargins(mytablrnsex)
# chisq.test(mytablrnsex)
mytablrnage<-xtable(lrn~age)
# mytablrneth<-table(lrn,eth)
# addmargins(mytablrneth)
# chisq.test(mytablrneth)
# mytablrnsex<-table(lrn,sex)
# addmargins(mytablrnsex)
# chisq.test(mytablrnsex)
mytablrnage<-xtabs(lrn~age)
# mytablrneth<-table(lrn,eth)
# addmargins(mytablrneth)
# chisq.test(mytablrneth)
# mytablrnsex<-table(lrn,sex)
# addmargins(mytablrnsex)
# chisq.test(mytablrnsex)
mytablrnage<-table(lrn,age)
addmargins(mytablrnage)
chisq.test(mytablrnage)
# mytablrneth<-table(lrn,eth)
# addmargins(mytablrneth)
# chisq.test(mytablrneth)
# mytablrnsex<-table(lrn,sex)
# addmargins(mytablrnsex)
# chisq.test(mytablrnsex)
table(lrn,age)
xtabs(~lrn+age)
chisq.text(xtabs(~lrn+age))
chisq.test(xtabs(~lrn+age))
attach(absenteeism)
plot(model)
model<-lm(iris$Petal.Length~.,data=iris[,c(1:2,4)])
summary(model)
durbinWatsonTest(model)
library(car)
durbinWatsonTest(model)
plot(model)
plot(model)
p<-plot(model)
names(p)
plot(model,which=2)
logistic<-func(){exp^x/(1+exp^x)}
logistic<-function(){exp^x/(1+exp^x)}
plot(logistic)
plot(logistic(0.2))
logistic<-function(x){exp^x/(1+exp^x)}
plot(logistic(0.2))
logistic<-function(x){exp(x)/(1+exp(x))}
plot(logistic(0.2))
logistic<-function(x){exp(x)/(1+exp(x))}
plot(logistic(0.2))
curve(logistic, from = -10, to = 10, col = 2)
p<--function(x){exp(x)/(1+exp(x))}
p<-function(x){exp(x)/(1+exp(x))}
curve(p, from = -10, to = 10, col = 2)
lp<-log(p/1-p)
p<-function(x){exp(x)/(1+exp(x))}
curve(p, from = -10, to = 10, col = 2)
lp<-function{x}{log(p/(1-p))}
log(2)
lp<-function{p}{log(p/(1-p))}
lp<-function(x){log(p/(1-p))}
curve(lp, from = -10, to = 10, col = 2)
p<-function(x){exp(x)/(1+exp(x))return p}
p<-function(x){exp(x)/(1+exp(x))return(p) }
p<-function(x){exp(x)/(1+exp(x));return(p) }
curve(p, from = -10, to = 10, col = 2)
lp<-function(x){log(p/(1-p))}
curve(lp, from = -10, to = 10, col = 2)
p<-function(x){exp(x)/(1+exp(x))}
lp<-function(x){log(p/(1-p))}
lp(10)
lp<-function(){log(p/(1-p))}
lp(10)
lp<-function(x){
p<-exp(x)/(1+exp(x));
log(p/(1-p))
}
lp(10)
lp<-function(x){
p<-exp(x)/(1+exp(x));
log(p/(1-p))
}
lp(1)
p<-function(x){exp(x)/(1+exp(x))}
curve(p, from = -10, to = 10, col = 2)
lp<-function(x){
p<-exp(x)/(1+exp(x));
log(p/(1-p))
}
lp(1)
curve(lp, from = -10, to = 10, col = 2)
?par
par(mfrow=c(1,2))
p<-function(x){exp(x)/(1+exp(x))}
curve(p, from = -10, to = 10, col = 2)
lp<-function(x){
p<-exp(x)/(1+exp(x));
log(p/(1-p))
}
curve(lp, from = -10, to = 10, col = 2)
p<-function(x, a=1, b=0.1){exp(a+b*x)/(1+exp(a+b*x))}
curve(p, from = -10, to = 10, col = 2)
curve(p, from = -60, to = 60, col = 2)
lp<-function(x){
p<-exp(a+b*x)/(1+exp(a+b*x));
log(p/(1-p))
}
curve(lp, from = -60, to = 60, col = 2)
par(mfrow=c(1,2))
p<-function(x, a=1, b=0.1){exp(a+b*x)/(1+exp(a+b*x))}
curve(p, from = -60, to = 60, col = 2)
lp<-function(x, a=1, b=0.1){
p<-exp(a+b*x)/(1+exp(a+b*x));
log(p/(1-p))
}
curve(lp, from = -60, to = 60, col = 2)
log(p)<-function(x, a=1, b=0.1){
p<-exp(a+b*x)/(1+exp(a+b*x));
log(p/(1-p))
}
log_p<-function(x, a=1, b=0.1){
p<-exp(a+b*x)/(1+exp(a+b*x));
log(p/(1-p))
}
curve(log_p, from = -60, to = 60, col = 2)
par(mfrow=c(1,2))
p<-function(x, a=1, b=0.1){exp(a+b*x)/(1+exp(a+b*x))}
curve(p, from = -60, to = 60, col = 2)
log_p<-function(x, a=1, b=0.1){
p<-exp(a+b*x)/(1+exp(a+b*x));
log(p/(1-p))
}
curve(log_p, from = -60, to = 60, col = 2)
par(mfrow=c(1,2))
odds<-function(x, a=1, b=0.1){exp(a+b*x)/(1+exp(a+b*x))}
curve(p, from = -60, to = 60, col = 2)
par(mfrow=c(1,2))
odds<-function(x, a=1, b=0.1){exp(a+b*x)/(1+exp(a+b*x))}
curve(odds, from = -60, to = 60, col = 2)
log_odds<-function(x, a=1, b=0.1){
odds<-exp(a+b*x)/(1+exp(a+b*x));
log(p/(1-p))
}
log_odds<-function(x, a=1, b=0.1){
odds<-exp(a+b*x)/(1+exp(a+b*x));
log(odds/(1-odds))
}
curve(log_odds, from = -60, to = 60, col = 2)
par(mfrow=c(1,2))
odds<-function(x, a=1, b=0.1){exp(a+b*x)/(1+exp(a+b*x))}
curve(odds, from = -60, to = 60, col = 2)
log_odds<-function(x, a=1, b=0.1){
odds<-exp(a+b*x)/(1+exp(a+b*x));
log(odds/(1-odds))
}
curve(log_odds, from = -60, to = 60, col = 2)
make.power(2)
num1 <- function(x) { # outer function
num2 <- function(y) { # inner function
return(x*y)
}
return(num2)
}
make.power(2)
num1 <- function(x) { # outer function
num2 <- function(y) { # inner function
return(x*y)
}
return(num2)
}
result <- num1(10)
print(result)
result
result <- num1(10)
result
num1 <- function(x) { # outer function
num2 <- function(y) { # inner function
return(x*y)
}
return(num2)
}
num1(10)
par(mfrow=c(1,2))
p<-function(x, a=1, b=0.1){exp(a+b*x)/(1+exp(a+b*x))}
curve(p, from = -60, to = 60, col = 2)
log_p<-function(x, a=1, b=0.1){
p<-exp(a+b*x)/(1+exp(a+b*x));
log(p/(1-p))
}
curve(log_p, from = -60, to = 60, col = 2)
p<-function(x, a=1, b=0.1){exp(a+b*x)/(1+exp(a+b*x))}
log_p<-function(x, a=1, b=0.1){
log(p/(1-p))
}
curve(log_p, from = -60, to = 60, col = 2)
par(mfrow=c(1,2))
p<-function(x, a=1, b=0.1){exp(a+b*x)/(1+exp(a+b*x))}
curve(p, from = -60, to = 60, col = 2)
log_p<-function(x, a=1, b=0.1){
p<-exp(a+b*x)/(1+exp(a+b*x));
log(p/(1-p))
}
curve(log_p, from = -60, to = 60, col = 2)
log_p<-function(x, a=1, b=0.1){
log(p(x)/(1-p(x)))
}
curve(log_p, from = -60, to = 60, col = 2)
par(mfrow=c(1,2))
p<-function(x, a=1, b=0.1){exp(a+b*x)/(1+exp(a+b*x))}
curve(p, from = -60, to = 60, col = 2)
log_p<-function(x, a=1, b=0.1){
log(p(x)/(1-p(x)))
}
curve(log_p, from = -60, to = 60, col = 2)
library(tidyverse)  # data manipulation and visualization
library(modelr)     # provides easy pipeline modeling functions
library(broom)
library(ISLR)
(default <- as_tibble(ISLR::Default))
#prepare data
set.seed(123)
sample <- sample(c(TRUE, FALSE), nrow(default), replace = T, prob = c(0.6,0.4))
train <- default[sample, ]
test <- default[!sample, ]
model1 <- glm(default ~ balance, family = "binomial", data = train)
default %>%
mutate(prob = ifelse(default == "Yes", 1, 0)) %>%
ggplot(aes(balance, prob)) +
geom_point(alpha = .15) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
ggtitle("Logistic regression model fit") +
xlab("Balance") +
ylab("Probability of Default")
summary(model1)
tidy(model1)
exp(coef(model1))
confint(model1)
predict(model1, data.frame(balance = c(1000, 2000)), type = "response")
model2 <- glm(default ~ student, family = "binomial", data = train)
tidy(model2)
predict(model2, data.frame(student = factor(c("Yes", "No"))), type = "response")
model3 <- glm(default ~ balance + income + student, family = "binomial", data = train)
tidy(model3)
head(default)
data(iris)
x <- iris[sample(1:nrow(iris)),]
x <- cbind(x, useless = rnorm(nrow(x)))
head(x)
x$virginica <- x$Species == "virginica"
x$Species <- NULL
plot(x, col=x$virginica+1)
names(x)
head(x)
model <- glm(virginica ~ .,
family = binomial(logit), data=x)
model
summary(model)
model
summary(model)
?glm
head(x)
?step
?AIC
model2<-step(model,data=x)
names(model2)
summary(model2)
#step 1
data(iris)
x <- iris[sample(1:nrow(iris)),]
x <- cbind(x, useless = rnorm(nrow(x)))
x$virginica <- x$Species == "virginica"
x$Species <- NULL
plot(x, col=x$virginica+1)
head(x)
#step 1
data(iris)
x<-iris
x <- cbind(x, useless = rnorm(nrow(x)))
x$virginica <- x$Species == "virginica"
x$Species <- NULL
head(x)
tail(x)
iris
nrow(iris)
sd(iris)
head(iris)
sd(iris[,1:4])
iris[,1:4]
sd(iris[,1:4])
sapply(iris[,1:4], sd)
model<-prcomp(iris[,1:4],scale=TRUE)
summary(model)
names(model)
model$sdev
model$scale
model$x
summary(model)
plot(model,main"",col="olive")
plot(model,main="",col="olive")
plot(model,main="",col="red")
biplot(model,main="",col="red")
plot(iris$Sepal.Length,yv,pch=16)
yv<-predict(model)[,1]
yv2<-predict(model)[,2]
par(mfrow=c(1,2))
plot(iris$Sepal.Length,yv,pch=16)
nrow(iris)
head(iris)
model<-prcomp(iris[,1:4],scale=TRUE)
summary(model)
plot(model,main="",col="red")
biplot(model,main="",col="red")
yv<-predict(model)[,1]
yv2<-predict(model)[,2]
par(mfrow=c(1,2))
plot(iris$Sepal.Length,yv,pch=16)
plot(iris$Sepal.Length,yv2,pch=16)
screeplot(model)
plot(model,main="",col="red")
yv<-predict(model)[,1]
yv2<-predict(model)[,2]
par(mfrow=c(1,2))
plot(iris$Sepal.Width,yv,pch=16)
plot(iris$Sepal.Width,yv2,pch=16)
yv<-predict(model)[,1]
yv2<-predict(model)[,2]
par(mfrow=c(4,2))
plot(iris$Sepal.Width,yv,pch=16)
plot(iris$Sepal.Width,yv2,pch=16)
plot(iris$Sepal.Length,yv,pch=16)
plot(iris$Sepal.Length,yv2,pch=16)
plot(iris$Petal.Width,yv,pch=16)
plot(iris$Petal.Width,yv2,pch=16)
plot(iris$Petal.Length,yv,pch=16)
plot(iris$Petal.Length,yv2,pch=16)
summary(model)
biplot(model,main="",col="red")
dev.off()
plot(model,main="",col="red")
biplot(model,main="",col="red")
PC1<-predict(model)[,1]
PC2<-predict(model)[,2]
par(mfrow=c(2,2))
plot(iris$Sepal.Width,PC1,pch=16)
plot(iris$Sepal.Length,PC1,pch=16)
plot(iris$Petal.Width,PC1,pch=16)
plot(iris$Petal.Length,PC1,pch=16)
nrow(iris)
head(iris)
model<-prcomp(iris[,-5],center=TRUE,scale=TRUE) # scale TRUE to compensate for different variances
model
names(model)
model$rotation
model
summary(model)
model
biplot(model,main="",col="red")
biplot(model,main="",col="red", ellipse=TRUE)
dev.off()
biplot(model,main="",col="red", ellipse=TRUE)
pairs(iris[,-5])
?pairs
panel.cor[,-5])
panel.cor <- function(x, y, ...)
{
par(usr = c(0, 1, 0, 1))
txt <- as.character(format(cor(x, y), digits=2))
text(0.5, 0.5, txt, cex = 6* abs(cor(x, y)))
}
pairs(iris[1:4], upper.panel=panel.cor)
library(PerformanceAnalytics)
library(PerformanceAnalytics)
chart.Correlation(iris[,-5],method="pearson")
model$x
chart.Correlation(model$x,method="pearson")
model
head(model$x)
model
model$rotation[1,]
model$rotation[1,]*iris[1,-5]
model$x[1,]
model$rotation[,1]*iris[1,-5]
model$x[1,]
iris[1,-5]*model$rotation[,1]
model$x[1,]
model
model$x[1,]
model$rotation[,1]
model$rotation[,1]
iris[1,-5]
dim(model$rotation[,1])
model$rotation[,1]
iris[1,-5]
biplot(model,main="",col="red", ellipse=TRUE)
pred<-predict(model,iris[1:5,-5])
pred
model$x[1:5,]
library(swirlify)
get_current_lesson()
setwd("~/Documents/Dropbox/concursR/Statistical_Analysis_with_R")
demo_lesson(28)
demo_lesson(28)
demo_lesson(28)
